from flask import Flask, request, jsonify, render_template
import pandas as pd
import joblib
from train_model import load_model
from preprocess import preprocess_data

# Initialize Flask app
app = Flask(__name__)

# Load the model and feature names
model = load_model('vulnerability_predictor.pkl')
feature_names = joblib.load('feature_names.pkl')

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    try:
        # Collect data from the form
        data = {
            "CVSS_score": float(request.form['CVSS_score']),
            "exploitability_subscore": float(request.form['exploitability_subscore']),
            "impact_subscore": float(request.form['impact_subscore']),
            "access_vector": request.form['access_vector'],
            "authentication": request.form['authentication'],
            "confidentiality_impact": request.form['confidentiality_impact'],
            "integrity_impact": request.form['integrity_impact'],
            "availability_impact": request.form['availability_impact'],
            "vendor": request.form['vendor'],
            "product": request.form['product'],
            "vulnerability_type": request.form['vulnerability_type']
        }

        # Convert to DataFrame
        features = pd.DataFrame(data, index=[0])
        
        # Preprocess the data
        X, _ = preprocess_data(features)
        X = X.reindex(columns=feature_names, fill_value=0)  # Ensure the same feature names and order
        
        # Make prediction
        prediction = model.predict(X)[0]
        
        # Render result template with the prediction
        return render_template('result.html', vulnerability=data, prediction=int(prediction))
    except Exception as e:
        return jsonify({'error': str(e)})

if __name__ == '__main__':
    # Run the Flask app
    app.run(host='0.0.0.0', port=5000, debug=True)

